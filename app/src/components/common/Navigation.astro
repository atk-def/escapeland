---
import clsx from 'clsx'
import type { HTMLAttributes } from 'astro/types'
import { twMerge } from 'tailwind-merge'
import Icon from '~/components/common/Icon.astro'
import { runQuery } from '~/sanity/run-query'
import { profileQuery } from '~/sanity/schemas/profile'

const profile = await runQuery(profileQuery)

const { contacts } = profile

const contact: Record<string, string> = Object.fromEntries(
  Object.entries(contacts ?? []).map(([key, value]) => {
    if (key === 'email') {
      return ['E-MAIL', `mailto:${value}`]
    }

    return [[key.toUpperCase()], value]
  }),
)

const navigation: Record<string, { pathname: string; icon?: string }> = {
  HOME: { pathname: '/', icon: 'heart' },
  BLOG: { pathname: '/blog/', icon: 'notebook' },
  ARTWORKS: { pathname: '/artworks/', icon: 'checkerboard' },
  PROJECTS: { pathname: '/engineering/', icon: 'device' },
}

export interface Props extends HTMLAttributes<'div'> {}

const { class: className, ...rest } = Astro.props
---

<style>
  .nav-link-base {
    @apply flex flex-col text-xs items-center gap-2 w-full;
  }
</style>

<div
  class={clsx(
    'w-full sm:w-auto h-auto z-10 sm:z-auto flex sm:flex-col gap-4 sm:left-3 rounded-xl text-sm tracking-wider bg-background px-2 sm:px-4 py-2 sm:py-16 items-center justify-center',
    className,
  )}
  {...rest}
>
  <section
    class="flex sm:flex-col sm:gap-8 flex-1 justify-evenly sm:justify-normal"
  >
    {
      Object.entries(navigation).map(([title, { pathname, icon }]) => {
        const isActive = Astro.url.pathname === pathname

        return (
          <a class="nav-link-base glitch group" href={pathname}>
            {icon && (
              <div
                class={twMerge(
                  'p-2',
                  isActive && 'bg-primary',
                  !isActive && 'group-hover:bg-primary',
                )}
              >
                <Icon name={icon} size={24} />
              </div>
            )}
            {title}
          </a>
        )
      })
    }
  </section>
  <section class="gap-2 sm:gap-8 mt-auto flex flex-col">
    {
      Object.entries(contact).map(([key, url]) => {
        return (
          <a class="nav-link-base glitch" href={url} target="_blank">
            {key}
            <Icon name="arrow-up-right-box" size={12} />
          </a>
        )
      })
    }
  </section>
</div>

<script>
  import { PowerGlitch } from 'powerglitch'

  document.addEventListener('astro:page-load', async () => {
    PowerGlitch.glitch('.glitch', { playMode: 'hover' })
  })
</script>
