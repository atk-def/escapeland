---
import '@fontsource/dotgothic16'
import Navigation from '~/components/common/Navigation.astro'
import '~/styles/crt-effect.css'
import '~/styles/global.css'
import { ViewTransitions } from 'astro:transitions'
import '~/styles/mouse-follower.css'
import { SEO } from 'astro-seo'
import { runQuery } from '~/sanity/run-query'
import { profileQuery } from '~/sanity/schemas/profile'
import ColorSchemeToggle from '~/components/common/ColorSchemeToggle.astro'
import Icon from '~/components/common/Icon.astro'

interface Props {
  title?: string
  headerTitle?: string
  seo?: Partial<{
    image: string
    description: string
    article: Partial<{
      publishedTime: string
      tags: string[]
    }>
  }>
  withBackBtn?: boolean
}
const { title, headerTitle, seo = {}, withBackBtn = false } = Astro.props

const { image = '/favicon.svg', description = `SWEET DREAM`, article } = seo

const url = Astro.request.url

const profile = await runQuery(profileQuery)
const { name } = profile

const titleSuffix = `${name.toLocaleUpperCase()}'s ESCAPELAND`
const fullTitle = title ? `${title} - ${titleSuffix}` : titleSuffix
---

<html lang="en" class="dark bg-effect-crt">
  <head>
    <SEO
      charset="utf-8"
      title={fullTitle}
      description={description}
      twitter={{
        card: 'summary',
        image,
        creator: name,
        title: fullTitle,
        description,
        site: url,
      }}
      openGraph={{
        basic: {
          title: fullTitle,
          type: article ? 'article' : 'website',
          image,
          url,
        },
        optional: {
          siteName: titleSuffix,
          description,
        },
        article: { authors: [name], ...article },
      }}
      extend={{
        link: [{ rel: 'icon', href: '/favicon.png' }],
        meta: [
          { name: 'viewport', content: 'width=device-width' },
          { name: 'generator', content: Astro.generator },
        ],
      }}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <ViewTransitions />
  </head>
  <body class="font-dotgothic16">
    <main
      class=`w-full h-[100dvh] sm:w-[40rem] bg-background
      sm:border-4 sm:border-on-background relative mx-auto my-0`
    >
      <div
        class="flex justify-between h-title-bar items-center border-b-4 border-on-background"
      >
        {
          withBackBtn && (
            <button
              id="back-btn"
              class="w-10 h-full flex justify-center items-center border-r-4 border-on-background"
            >
              <Icon name="arrow-left" />
            </button>
          )
        }
        <span class="font-bold truncate ml-4">{headerTitle || title}</span>
        <ColorSchemeToggle
          class="w-10 h-full flex justify-center items-center border-l-4 border-on-background"
        />
      </div>
      <Navigation class="absolute bottom-0" />
      <page-layout class="flex flex-col">
        <div class="scroll-wrapper h-main-view overflow-y-auto thin-scrollbar">
          <div class="scroll-content p-main-view box-border relative">
            <slot />
          </div>
        </div>
      </page-layout>
    </main>

    <script>
      class PageLayout extends HTMLElement {
        constructor() {
          super()
          this.init()
        }

        async init() {
          document.addEventListener('astro:page-load', this.handlePageLoad)
        }

        handlePageLoad = async () => {
          if (window.matchMedia('(pointer: fine)').matches) {
            await this.setupSmoothScrollAndMouseFollower()
          }
          this.setupBackButton()
        }

        async setupSmoothScrollAndMouseFollower() {
          const { default: MouseFollower } = await import('mouse-follower')
          const { default: Lenis } = await import('@studio-freight/lenis')
          const { default: gsap } = await import('gsap')

          const lenis = new Lenis({
            wrapper: this.querySelector('.scroll-wrapper') as HTMLElement,
            content: this.querySelector('.scroll-content') as HTMLElement,
          })

          const raf = (time: DOMHighResTimeStamp) => {
            lenis.raf(time)
            requestAnimationFrame(raf)
          }

          requestAnimationFrame(raf)
          MouseFollower.registerGSAP(gsap)
          new MouseFollower()
        }

        setupBackButton() {
          const backBtnEl = document.getElementById('back-btn')
          if (backBtnEl) {
            this.debounce(backBtnEl, 300, () => history.back())
          }
        }

        debounce(element: HTMLElement, delay: number, callback: () => void) {
          let isDebouncing = false
          element.onclick = () => {
            if (!isDebouncing) {
              isDebouncing = true
              callback()
              setTimeout(() => (isDebouncing = false), delay)
            }
          }
        }
      }

      customElements.define('page-layout', PageLayout)
    </script>
  </body>
</html>
