---
import type { HTMLAttributes } from 'astro/types'
import { cn } from '~/utils/style-related'

interface Props extends HTMLAttributes<'button'> {}
const { class: className, ...rest } = Astro.props
---

<astro-color-scheme-toggle
  class={cn(
    'color-scheme-toggle text-on-background/30 cursor-pointer',
    className,
  )}
  transition:persist
  data-cursor="-pointer"
  role="button"
  {...rest}
>
  <svg
    width="20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
  >
    <path
      d="M13 3h-2v2h2V3zm4 2h2v2h-2V5zm-6 6h2v2h-2v-2zm-8 0h2v2H3v-2zm18 0h-2v2h2v-2zM5 5h2v2H5V5zm14 14h-2v-2h2v2zm-8 2h2v-2h-2v2zm-4-2H5v-2h2v2zM9 7h6v2H9V7zm0 8H7V9h2v6zm0 0v2h6v-2h2V9h-2v6H9z"
      fill="currentColor"></path>
  </svg>
</astro-color-scheme-toggle>

<script is:inline>
  class AstroColorSchemeToggle extends HTMLElement {
    constructor() {
      super()
      this.init()
    }

    init = () => {
      const storedColorScheme = localStorage.getItem('colorScheme')
      const isDarkMode = storedColorScheme === 'dark'

      if (storedColorScheme) {
        isDarkMode ? this.enableDarkMode() : this.disableDarkMode()
      } else {
        this.watchDeviceColorScheme()
      }

      this.addEventListener('click', () => {
        const isDarkModeCurrently =
          document.documentElement.classList.contains('dark')

        !isDarkModeCurrently ? this.enableDarkMode() : this.disableDarkMode()
      })
    }

    disableDarkMode = (store = true) => {
      document.documentElement.classList.add('light')
      document.documentElement.classList.remove('dark')
      document.documentElement.classList.remove('bg-effect-crt')
      this.innerHTML = `<svg width="20" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"> <path d="M20 0h2v2h2v2h-2v2h-2V4h-2V2h2V0ZM8 4h8v2h-2v2h-2V6H8V4ZM6 8V6h2v2H6Zm0 8H4V8h2v8Zm2 2H6v-2h2v2Zm8 0v2H8v-2h8Zm2-2v2h-2v-2h2Zm-2-4v-2h2V8h2v8h-2v-4h-2Zm-4 0h4v2h-4v-2Zm0 0V8h-2v4h2Zm-8 6H2v2H0v2h2v2h2v-2h2v-2H4v-2Z"/></svg>`
      store && localStorage.setItem('colorScheme', 'light')
    }

    enableDarkMode = (store = true) => {
      document.documentElement.classList.remove('light')
      document.documentElement.classList.add('dark')
      document.documentElement.classList.add('bg-effect-crt')
      this.innerHTML = `<svg width="20" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M13 3h-2v2h2V3zm4 2h2v2h-2V5zm-6 6h2v2h-2v-2zm-8 0h2v2H3v-2zm18 0h-2v2h2v-2zM5 5h2v2H5V5zm14 14h-2v-2h2v2zm-8 2h2v-2h-2v2zm-4-2H5v-2h2v2zM9 7h6v2H9V7zm0 8H7V9h2v6zm0 0v2h6v-2h2V9h-2v6H9z" fill="currentColor"/></svg>`
      store && localStorage.setItem('colorScheme', 'dark')
    }

    watchDeviceColorScheme = () => {
      const darkQuery = window.matchMedia('(prefers-color-scheme: dark)')

      if (darkQuery.matches) {
        this.enableDarkMode(false)
      }

      darkQuery.addEventListener('change', (e) => {
        e.matches ? this.enableDarkMode(false) : this.disableDarkMode(false)
      })
    }
  }

  customElements.define('astro-color-scheme-toggle', AstroColorSchemeToggle)
</script>
