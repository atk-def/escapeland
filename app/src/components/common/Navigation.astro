---
import clsx from 'clsx'
import type { HTMLAttributes } from 'astro/types'
import { twMerge } from 'tailwind-merge'
import { Image } from 'astro:assets'
import Logo from '~/../public/favicon.svg'
import { fetchProfile } from '~/store/profile'
import Graphics from './Graphics.astro'
import Icon from '~/components/common/Icon.astro'

const profile = await fetchProfile()

const { contacts } = profile

type Link = { url: string; icon: string; isExternal?: boolean }

const contact4Navigation: Record<string, Link> = Object.fromEntries(
  Object.entries(contacts ?? []).map(([key, value]) => {
    if (key === 'email') {
      return [
        'E-MAIL',
        { url: `mailto:${value}`, icon: 'mail', isExternal: true },
      ]
    }

    if (key === 'telegram') {
      return [
        [key.toUpperCase()],
        { url: value, icon: 'message-circle', isExternal: true },
      ]
    }

    return [[key.toUpperCase()], { url: value, icon: key, isExternal: true }]
  }),
)

const navigation: Record<string, Link> = {
  BLOG: { url: '/blog', icon: 'scroll-text' },
  ARTWORKS: { url: '/artworks', icon: 'pencil-ruler' },
  ENGINEERING: { url: '/engineering', icon: 'binary' },
  ...contact4Navigation,
}

export interface Props extends HTMLAttributes<'div'> {}

const { class: className, ...rest } = Astro.props
---

<div
  class={clsx(
    'w-[calc(100%_-_3rem)] sm:w-auto sm:h-[calc(100%_-_8rem)] flex sm:flex-col gap-8 fixed left-6 text-sm tracking-wider',
    className,
  )}
  {...rest}
>
  <section class="flex flex-col gap-8">
    <a class="w-12 transition-all" href="/">
      <Image
        class="border-2 bg-primary border-primary/30 rounded-lg"
        src={Logo}
        alt="Logo"
        draggable="false"
      />
    </a>
    <aside class="flex flex-col gap-4 ml-1">
      {
        Object.entries(navigation).map(
          ([title, { url, icon, isExternal = false }]) => {
            const isProd = import.meta.env.PROD
            const isActive = (isProd ? `${url}/` : url) === Astro.url.pathname
            const isContact = Object.values(contacts ?? {}).includes(url)
            return (
              <a
                class={twMerge(
                  'flex items-center gap-4 opacity-50',
                  isActive && 'font-bold opacity-100',
                  !isActive && 'hover:font-bold hover:opacity-100',
                )}
                href={url}
                target={isContact ? '_blank' : '_self'}
              >
                {icon && <Icon name={icon} />}
                {title}
                {isExternal && <Icon name="arrow-up-right" size={12} />}
                {isActive && <i>*</i>}
              </a>
            )
          },
        )
      }
    </aside>
  </section>
  <Graphics class="ml-auto sm:mt-auto sm:ml-0" />
</div>
