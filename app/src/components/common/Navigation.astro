---
import clsx from 'clsx'
import type { HTMLAttributes } from 'astro/types'
import { twMerge } from 'tailwind-merge'
import { fetchProfile } from '~/store/profile'
import Icon from '~/components/common/Icon.astro'

const profile = await fetchProfile()

const { contacts } = profile

const contact: Record<string, string> = Object.fromEntries(
  Object.entries(contacts ?? []).map(([key, value]) => {
    if (key === 'email') {
      return ['E-MAIL', `mailto:${value}`]
    }

    return [[key.toUpperCase()], value]
  }),
)

const navigation: Record<string, { url: string; icon?: string }> = {
  HOME: { url: '/', icon: 'heart' },
  BLOG: { url: '/blog', icon: 'notebook' },
  ARTWORKS: { url: '/artworks', icon: 'checkerboard' },
  PROJECTS: { url: '/engineering', icon: 'device' },
}

export interface Props extends HTMLAttributes<'div'> {}

const { class: className, ...rest } = Astro.props
---

<style>
  .nav-link-base {
    @apply flex flex-col text-xs items-center gap-2 w-full;
  }
</style>

<div
  class={clsx(
    'w-full sm:w-auto h-fit sm:h-full z-10 sm:z-auto flex sm:flex-col gap-4 fixed left-0 bottom-0 sm:left-1 sm:top-0 text-sm tracking-wider bg-container px-2 sm:px-4 py-2 sm:py-16 items-center justify-center',
    className,
  )}
  {...rest}
>
  <section class="flex sm:flex-col sm:gap-8 flex-1">
    {
      Object.entries(navigation).map(([title, { url, icon }]) => {
        const isProd = import.meta.env.PROD
        const isActive = (isProd ? `${url}/` : url) === Astro.url.pathname

        return (
          <a
            class={twMerge(
              'nav-link-base',
              isActive && 'font-bold',
              !isActive && 'group hover:font-bold',
            )}
            href={url}
          >
            {icon && (
              <div
                class={twMerge(
                  'p-2',
                  isActive && 'bg-primary',
                  !isActive && 'group-hover:bg-primary',
                )}
              >
                <Icon name={icon} size={24} />
              </div>
            )}
            {title}
          </a>
        )
      })
    }
  </section>
  <section class="gap-2 sm:gap-8 mt-auto flex flex-col">
    {
      Object.entries(contact).map(([key, url]) => {
        return (
          <a class="nav-link-base" href={url} target="_blank">
            {key}
            <Icon name="arrow-up-right-box" size={12} />
          </a>
        )
      })
    }
  </section>
</div>
