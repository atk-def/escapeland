---
import PageLayout from '~/layouts/PageLayout.astro'
import { runQuery } from '~/sanity/run-query'
import { projectsQuery } from '~/sanity/schemas/project'
import { sortDescendingByDate } from '~/utils/sort'
import SanityPicture from '~/components/common/SanityPicture.astro'
import { Image } from 'astro:assets'
import { formatDate, camelToSentenceCase } from '~/utils'

const projects = (await runQuery(projectsQuery)).sort(
  sortDescendingByDate('startedAt'),
)
---

<PageLayout title={'PROJECTS'}>
  {
    projects && (
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {projects.map((project) => {
          const {
            mainImage,
            resources,
            title,
            startedAt,
            completedAt,
            description,
            status,
          } = project

          return (
            <div class="flex flex-col p-2 bg-container text-on-container [text-shadow:none]">
              <div class="relative">
                <SanityPicture asset={mainImage.asset} />
                <Image
                  class="absolute -bottom-4 right-0 opacity-75 [filter:drop-shadow(0_0_0.125rem_rgb(var(--colors-primary)))] select-none"
                  width={80}
                  height={64}
                  src={`/${status}.png`}
                  draggable="false"
                  alt="Status"
                />
              </div>

              <div class="flex flex-col mt-2 gap-2 h-full justify-between">
                <section>
                  <div class="flex justify-between items-end border-b border-on-container">
                    <h2 class="text-lg font-bold">{title}</h2>
                    <span class="text-xs text-right">
                      {`${formatDate(startedAt, false)} - ${completedAt ? formatDate(completedAt, false) : 'Present'}`}
                    </span>
                  </div>

                  <p class="text-sm">{description}</p>
                </section>

                <section>
                  <h3>Resources</h3>
                  <div class="flex flex-col">
                    {Object.entries(resources).map(
                      ([keyName, link]) =>
                        link && (
                          <a
                            class="py-2 sm:py-0 text-xs bg-primary border border-on-container"
                            href={link}
                            target="_blank"
                          >
                            {`>${camelToSentenceCase(keyName).toLocaleUpperCase()}`}
                          </a>
                        ),
                    )}
                  </div>
                </section>
              </div>
            </div>
          )
        })}
      </div>
    )
  }</PageLayout
>
